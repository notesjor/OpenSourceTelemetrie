//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 02.02.2019 16:43:12
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.Extensions.Configuration;

namespace OpenSourceTelemetrieData.Model.Db
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class IpDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(IpDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertLocationEntry(LocationEntry instance);
        partial void UpdateLocationEntry(LocationEntry instance);
        partial void DeleteLocationEntry(LocationEntry instance);

        #endregion

        public IpDataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public IpDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        public IpDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public IpDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public IpDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public IpDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<LocationEntry> LocationEntries
        {
            get
            {
                return this.GetTable<LocationEntry>();
            }
        }
    }
}

namespace OpenSourceTelemetrieData.Model.Db
{

    /// <summary>
    /// There are no comments for OpenSourceTelemetrieData.Model.Db.LocationEntry in the schema.
    /// </summary>
    [Table(Name = @"LocationEntries")]
    public partial class LocationEntry : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private byte _IP1S;

        private byte _IP1E;

        private byte _IP2S;

        private byte _IP2E;

        private byte _IP3S;

        private byte _IP3E;

        private byte _IP4S;

        private byte _IP4E;

        private string _Country;

        private string _City;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIP1SChanging(byte value);
        partial void OnIP1SChanged();
        partial void OnIP1EChanging(byte value);
        partial void OnIP1EChanged();
        partial void OnIP2SChanging(byte value);
        partial void OnIP2SChanged();
        partial void OnIP2EChanging(byte value);
        partial void OnIP2EChanged();
        partial void OnIP3SChanging(byte value);
        partial void OnIP3SChanged();
        partial void OnIP3EChanging(byte value);
        partial void OnIP3EChanged();
        partial void OnIP4SChanging(byte value);
        partial void OnIP4SChanged();
        partial void OnIP4EChanging(byte value);
        partial void OnIP4EChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        #endregion

        public LocationEntry()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IP1S in the schema.
        /// </summary>
        [Column(Storage = "_IP1S", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP1S
        {
            get
            {
                return this._IP1S;
            }
            set
            {
                if (this._IP1S != value)
                {
                    this.OnIP1SChanging(value);
                    this.SendPropertyChanging("IP1S");
                    this._IP1S = value;
                    this.SendPropertyChanged("IP1S");
                    this.OnIP1SChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IP1E in the schema.
        /// </summary>
        [Column(Storage = "_IP1E", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP1E
        {
            get
            {
                return this._IP1E;
            }
            set
            {
                if (this._IP1E != value)
                {
                    this.OnIP1EChanging(value);
                    this.SendPropertyChanging("IP1E");
                    this._IP1E = value;
                    this.SendPropertyChanged("IP1E");
                    this.OnIP1EChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IP2S in the schema.
        /// </summary>
        [Column(Storage = "_IP2S", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP2S
        {
            get
            {
                return this._IP2S;
            }
            set
            {
                if (this._IP2S != value)
                {
                    this.OnIP2SChanging(value);
                    this.SendPropertyChanging("IP2S");
                    this._IP2S = value;
                    this.SendPropertyChanged("IP2S");
                    this.OnIP2SChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IP2E in the schema.
        /// </summary>
        [Column(Storage = "_IP2E", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP2E
        {
            get
            {
                return this._IP2E;
            }
            set
            {
                if (this._IP2E != value)
                {
                    this.OnIP2EChanging(value);
                    this.SendPropertyChanging("IP2E");
                    this._IP2E = value;
                    this.SendPropertyChanged("IP2E");
                    this.OnIP2EChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IP3S in the schema.
        /// </summary>
        [Column(Storage = "_IP3S", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP3S
        {
            get
            {
                return this._IP3S;
            }
            set
            {
                if (this._IP3S != value)
                {
                    this.OnIP3SChanging(value);
                    this.SendPropertyChanging("IP3S");
                    this._IP3S = value;
                    this.SendPropertyChanged("IP3S");
                    this.OnIP3SChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IP3E in the schema.
        /// </summary>
        [Column(Storage = "_IP3E", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP3E
        {
            get
            {
                return this._IP3E;
            }
            set
            {
                if (this._IP3E != value)
                {
                    this.OnIP3EChanging(value);
                    this.SendPropertyChanging("IP3E");
                    this._IP3E = value;
                    this.SendPropertyChanged("IP3E");
                    this.OnIP3EChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IP4S in the schema.
        /// </summary>
        [Column(Storage = "_IP4S", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP4S
        {
            get
            {
                return this._IP4S;
            }
            set
            {
                if (this._IP4S != value)
                {
                    this.OnIP4SChanging(value);
                    this.SendPropertyChanging("IP4S");
                    this._IP4S = value;
                    this.SendPropertyChanged("IP4S");
                    this.OnIP4SChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IP4E in the schema.
        /// </summary>
        [Column(Storage = "_IP4E", CanBeNull = false, DbType = "integer NOT NULL", IsPrimaryKey = true)]
        public byte IP4E
        {
            get
            {
                return this._IP4E;
            }
            set
            {
                if (this._IP4E != value)
                {
                    this.OnIP4EChanging(value);
                    this.SendPropertyChanging("IP4E");
                    this._IP4E = value;
                    this.SendPropertyChanged("IP4E");
                    this.OnIP4EChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Storage = "_Country", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
